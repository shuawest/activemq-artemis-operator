// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v2alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemis":                schema_pkg_apis_broker_v2alpha1_ActiveMQArtemis(ref),
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisAddress":         schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisAddress(ref),
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisAddressSpec":     schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisAddressSpec(ref),
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisAddressStatus":   schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisAddressStatus(ref),
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisScaledown":       schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisScaledown(ref),
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisScaledownSpec":   schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisScaledownSpec(ref),
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisScaledownStatus": schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisScaledownStatus(ref),
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisSpec":            schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisSpec(ref),
		"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisStatus":          schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisStatus(ref),
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemis(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemis is the Schema for the activemqartemis API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisSpec", "github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisAddress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemisAddress is the Schema for the activemqartemisaddresses API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisAddressSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisAddressStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisAddressSpec", "github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisAddressStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisAddressSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemisAddressSpec defines the desired state of ActiveMQArtemisAddress",
				Properties: map[string]spec.Schema{
					"addressName": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"queueName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"routingType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"addressName", "queueName", "routingType"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisAddressStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemisAddressStatus defines the observed state of ActiveMQArtemisAddress",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisScaledown(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemisScaledown is the Schema for the activemqartemisscaledowns API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisScaledownSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisScaledownStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisScaledownSpec", "github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ActiveMQArtemisScaledownStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisScaledownSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemisScaledownSpec defines the desired state of ActiveMQArtemisScaledown",
				Properties: map[string]spec.Schema{
					"localOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book.kubebuilder.io/beyond_basics/generating_crd.html Namespace  string `json:\"namespace\"`",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"localOnly"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisScaledownStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemisScaledownStatus defines the observed state of ActiveMQArtemisScaledown",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemisSpec defines the desired state of ActiveMQArtemis",
				Properties: map[string]spec.Schema{
					"adminUser": {
						SchemaProps: spec.SchemaProps{
							Description: "User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"adminPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentPlan": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.DeploymentPlanType"),
						},
					},
					"acceptors": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration of all acceptors",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.AcceptorType"),
									},
								},
							},
						},
					},
					"connectors": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration of all connectors",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ConnectorType"),
									},
								},
							},
						},
					},
					"console": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the embedded web console",
							Ref:         ref("github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ConsoleType"),
						},
					},
					"enableContinuity": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether or not to enable the continuity plugin. See required fields for continuity.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"siteId": {
						SchemaProps: spec.SchemaProps{
							Description: "Name the continuity site. Must be unique in the set of peers (is same across the artemis cluster). Required for continuity.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"localContinuityUser": {
						SchemaProps: spec.SchemaProps{
							Description: "Username to connect to the local broker for continuity connections. Required for continuity.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"localContinuityPass": {
						SchemaProps: spec.SchemaProps{
							Description: "Password to connect to the local broker for continuity connections. Required for continuity.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remoteContinuityPass": {
						SchemaProps: spec.SchemaProps{
							Description: "Password to connect to the remote broker for continuity connections. Required for continuity.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remoteContinuityUser": {
						SchemaProps: spec.SchemaProps{
							Description: "Username to connect to the remote broker for continuity connections. Required for continuity.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerSiteUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "Username to connect to the peer site broker/cluster for continuity connections. Required for continuity.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerContinuityUser": {
						SchemaProps: spec.SchemaProps{
							Description: "Username to connect to the peer site broker/cluster for continuity connections. Required for continuity.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerContinuityPass": {
						SchemaProps: spec.SchemaProps{
							Description: "Password to connect to the peer site broker/cluster for continuity connections. Required for continuity.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"activeOnStart": {
						SchemaProps: spec.SchemaProps{
							Description: "Identifies this is the site that should be active when first started. If another active site is connected to, this site will defer to the other. You can also start both sites inactive and explictly activate the desired start. Required for continuity.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"brokerIdCacheSize": {
						SchemaProps: spec.SchemaProps{
							Description: "Size of the broker id cache size, used by the broker to remove duplicate messages across sites. Make sure the id cache is sufficiently sized for your volume of messages. The default is 3000.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"inflowStagingDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Amount of time in millseconds to delay messages in the inflow staging queues before delivering them to the target queues. Useful for active:active site topologies. The default is 60000 ms or 1 minute.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"bridgeInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "Bridge reconnection interval for all the bridges created by the continuity plugin. The default is 1000 ms or 1 second.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"bridgeIntervalMultiplier": {
						SchemaProps: spec.SchemaProps{
							Description: "Bridge reconnection interval backoff multiplier for all the bridges created by the continuity plugin. The default is 0.5.",
							Type:        []string{"number"},
							Format:      "float",
						},
					},
					"outflowExhaustedPollDuration": {
						SchemaProps: spec.SchemaProps{
							Description: "Time in milliseconds between polls to check for a site to be exhausted during deactivation. The default is 100 ms.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"outflowAcksConsumedPollDuration": {
						SchemaProps: spec.SchemaProps{
							Description: "Time in milliseconds between polls to check for a site to be consume all the acks during activation. The default is 100 ms.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"inflowAcksConsumedPollDuration": {
						SchemaProps: spec.SchemaProps{
							Description: "Time in milliseconds between polls to all the inflow acks have been consumed during activation. The default is 100 ms.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"activationTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "Time in milliseconds to activate a site and start serving clients, overriding the wait for the peer site to be exhausted, and acks to be consumed. The default is 300000 ms or 5 minutes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"reorgManagement": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether or not to reorganized all the address, queue, divert, and bridge primitives under the continuity hierarchy in JMX/Jolokia. The default is true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"continuityLogLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging level for the continuity plugin. The default is INFO.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.AcceptorType", "github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ConnectorType", "github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.ConsoleType", "github.com/rh-messaging/activemq-artemis-operator/pkg/apis/broker/v2alpha1.DeploymentPlanType"},
	}
}

func schema_pkg_apis_broker_v2alpha1_ActiveMQArtemisStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ActiveMQArtemisStatus defines the observed state of ActiveMQArtemis",
				Properties: map[string]spec.Schema{
					"podStatus": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/RHsyseng/operator-utils/pkg/olm.DeploymentStatus"),
						},
					},
				},
				Required: []string{"podStatus"},
			},
		},
		Dependencies: []string{
			"github.com/RHsyseng/operator-utils/pkg/olm.DeploymentStatus"},
	}
}
